{"version":3,"file":"booking-card.js","sourceRoot":"","sources":["booking-card.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport './booking-service-info';\nimport './booking-date-picker';\nimport './booking-time-picker';\n\nexport class BookingCard extends LitElement {\n  @property({ type: String, attribute: 'api-url' }) apiUrl = '';\n  @property({ type: String, attribute: 'bookings-id' }) bookingsId = '';\n  @property({ type: String, attribute: 'service-displayname' }) serviceDisplayName = '';\n  @property({ type: String }) icon = '';\n\n  @state() business: any = null;\n  @state() services: any[] = [];\n  @state() selectedService: any = null;\n  @state() availability: any = null;\n  @state() loading = true;\n  @state() error = '';\n\n  static styles = css`\n    .card {\n      border: 1px solid #eee;\n      border-radius: 12px;\n      padding: 24px;\n      background: #fff;\n      max-width: 420px;\n      margin: 0 auto;\n      font-family: system-ui, sans-serif;\n    }\n    hr {\n      border: none;\n      border-top: 1px solid #eee;\n      margin: 24px 0;\n    }\n  `;\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.fetchAll();\n  }\n\n  async fetchAll() {\n    this.loading = true;\n    this.error = '';\n    try {\n      // 1. Fetch business info\n      const businessRes = await fetch(`${this.apiUrl}/api/tasks/${encodeURIComponent(this.bookingsId)}`);\n      const businessJson = await businessRes.json();\n      this.business = businessJson.result?.task;\n\n      // 2. Fetch services (updated for new API structure)\n      const servicesRes = await fetch(`${this.apiUrl}/api/tasks/${encodeURIComponent(this.bookingsId)}/services`);\n      const servicesJson = await servicesRes.json();\n      this.services = servicesJson.services?.results || [];\n\n      // Select the service by displayName (case-insensitive)\n      this.selectedService = this.services.find(\n        (s: any) => s.displayName?.toLowerCase() === this.serviceDisplayName?.toLowerCase()\n      ) || this.services[0];\n\n      // Extract staff IDs from the selected service only\n      const staffIds: string[] = Array.isArray(this.selectedService?.staffMemberIds)\n        ? this.selectedService.staffMemberIds\n        : [];\n\n      // 3. Fetch availability for selected service's staff (example: fetch for today)\n      const today = new Date();\n      const startDateTime = today.toISOString();\n      const endDateTime = new Date(today.getTime() + 24 * 60 * 60 * 1000).toISOString();\n\n      const availRes = await fetch(`${this.apiUrl}/solutions/bookingBusinesses/${encodeURIComponent(this.bookingsId)}/staffAvailability`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ staffIds, startDateTime, endDateTime }),\n      });\n      const availJson = await availRes.json();\n      this.availability = availJson.results || [];\n    } catch (e) {\n      this.error = 'Failed to load booking data.';\n    }\n    this.loading = false;\n  }\n\n  render() {\n    if (this.loading) return html`<div class=\"card\">Loading...</div>`;\n    if (this.error) return html`<div class=\"card\">${this.error}</div>`;\n    return html`\n      <div class=\"card\">\n        <booking-service-info\n          .business=${this.business}\n          .services=${[this.selectedService]}\n          .icon=${this.icon}>\n        </booking-service-info>\n        <hr />\n        <booking-date-picker\n          .businessHours=${this.business?.businessHours || []}\n          .timeZone=${this.business?.bookingPageSettings?.businessTimeZone || ''}\n        ></booking-date-picker>\n        <booking-time-picker\n          .availability=${this.availability}\n          .businessHours=${this.business?.businessHours || []}\n          .timeZone=${this.business?.bookingPageSettings?.businessTimeZone || ''}\n        ></booking-time-picker>\n      </div>\n    `;\n  }\n}\ncustomElements.define('booking-card', BookingCard);"]}